package upgrad;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Projections;
import org.bson.Document;
import org.bson.conversions.Bson;

import java.util.Arrays;

import static com.mongodb.client.model.Aggregates.count;
import static com.mongodb.client.model.Aggregates.match;
import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Filters.or;

public class CRUDHelper {

    /**
     * Display ALl products
     * @param collection
     */
    public static void displayAllProducts(MongoCollection<Document> collection) {
        System.out.println("------ Displaying All Products ------");
        MongoCursor cursor = collection.find().cursor();
        while(cursor.hasNext()){
            System.out.println(cursor.next());
        }

    }

    /**
     * Display top 5 Mobiles
     * @param collection
     */
    public static void displayTop5Mobiles(MongoCollection<Document> collection) {
        System.out.println();
        System.out.println("------ Displaying Top 5 Mobiles ------");

        Bson filter = eq("Category", "Mobiles");
        MongoCursor<Document> cursor = collection.find(filter).limit(5).cursor();
        while(cursor.hasNext()){
            System.out.println(cursor.next().toJson());
        }
    }

    /**
     * Display products ordered by their categories in Descending order without auto generated Id
     * @param collection
     */
    public static void displayCategoryOrderedProductsDescending(MongoCollection<Document> collection) {
        System.out.println();
        System.out.println("------ Displaying Products ordered by categories without AutoGenerated Ids ------");
        Bson filter1 =  or(eq("Category", "Mobiles"), eq("Category", "HeadPhones"), eq("Category", "Cameras"));
        Bson projection = Projections.fields(Projections.excludeId());
        MongoCursor<Document> cursor = collection.find(filter1).projection(projection).cursor();
        while(cursor.hasNext()){
            System.out.println(cursor.next().toJson());
        }
    }


    /**
     * Display number of products in each group
     * @param collection
     */
    public static void displayProductCountByCategory(MongoCollection<Document> collection) {
        System.out.println();
        System.out.println("------ Displaying Product Count by categories ------");


        for( Document docs : collection.aggregate(Arrays.asList(
                match(Filters.or(eq("Category", "Mobiles"))),
                count()))) {
            System.out.println("Category : Mobiles \t| Count : " + docs.values());
        }
        for( Document docs : collection.aggregate(Arrays.asList(
                match(Filters.or(eq("Category", "Cameras"))),
                count()))) {
            System.out.println("Category : Cameras \t| Count : " + docs.values());
        }
        for( Document docs : collection.aggregate(Arrays.asList(
                match(Filters.or(eq("Category", "HeadPhones"))),
                count()))) {
            System.out.println("Category : HeadPhones \t| Count : " + docs.values());
        }
    }

    /**
     * Display Wired Headphones
     * @param collection
     */
    public static void displayWiredHeadphones(MongoCollection<Document> collection) {
        System.out.println();
        System.out.println("------ Displaying Wired headphones ------");

        Bson filter1 =  eq("ConnectorType", "Wired");
        MongoCursor<Document> cursor = collection.find(filter1).cursor();
        while(cursor.hasNext()){
            System.out.println(cursor.next().toJson());
        }
    }
}